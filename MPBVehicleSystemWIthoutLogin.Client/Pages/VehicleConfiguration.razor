@page "/vehicleConfiguration"
@inject HttpClient Http
@* @inject ISnackbar snackBar *@
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<PageTitle>VehicleConfiguration</PageTitle>

<h3>VehicleConfiguration</h3>

<MudContainer Class="mt-8" Style="width:1000px" Fixed="true">
    <MudExpansionPanels>
        <MudExpansionPanel>
            <TitleContent>
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.Outlined.LocationOn" Color="Color.Warning" class="mr-3"></MudIcon>
                    <MudText>Locations</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <EditForm Model="@location" OnValidSubmit="addLocation">
                    <DataAnnotationsValidator />
                    <MudGrid Class="mt-2">
                        <MudItem>
                            <MudTextField @bind-Value="location.Name" Label="Enter vehicle location name" For="@(() => location.Name)" Style="width:600px" Margin="Margin.None"></MudTextField>
                        </MudItem>
                        <MudItem Class="mt-3">
                            <MudButton ButtonType="ButtonType.Submit" Disabled="isLocDisable" Variant="Variant.Filled" Size="Size.Small" Style="text-transform:none" Color="Color.Info"
                                       EndIcon="@Icons.Material.Outlined.Add" IconSize="Size.Small">Add</MudButton>
                        </MudItem>
                    </MudGrid>
                    <MudGrid Class="mt-5 ml-8 mb-2">
                        <MudSimpleTable Dense Hover Elevation="0">
                             <tbody>
                                 @if (vehicleLocations != null)
                                {
                                    foreach (var items in vehicleLocations)
                                    {
                                        <tr>
                                           @*  <td width="100px">
                                                @if (items.IsActive == true)
                                                {
                                                    <MudTooltip Text="Active" Placement="Placement.Right">
                                                        <MudIconButton OnClick="@((e) => isActiveLocation(items.Id))" Icon="@Icons.Material.Outlined.Sync" Size="Size.Small" Color="Color.Info"></MudIconButton>
                                                    </MudTooltip>
                                                }
                                                else
                                                {
                                                    <MudTooltip Text="Inactive" Placement="Placement.Right">
                                                        <MudIconButton OnClick="@((e) => isActiveLocation(items.Id))" Icon="@Icons.Material.Outlined.SyncDisabled" Size="Size.Small" Color="Color.Error"></MudIconButton>
                                                    </MudTooltip>
                                                }
                                            </td> *@
                                            <td style="@(items.IsActive == false ? $"color:{Colors.Grey.Lighten1};" : $"")">@items.Name</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudGrid>
                </EditForm>
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel>
            <TitleContent>
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.Outlined.Warehouse" Color="Color.Warning" class="mr-3"></MudIcon>
                    <MudText>Departments</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <EditForm Model="department" OnValidSubmit="addDepartment">
                    <DataAnnotationsValidator />
                    <MudGrid Class="mt-2">
                        <MudItem>
                            <MudTextField @bind-Value="department.Name" Label="Enter vehicle department name" For="@(() => department.Name)" Style="width:600px" Margin="Margin.None"></MudTextField>
                        </MudItem>
                        <MudItem Class="mt-3">
                            <MudButton ButtonType="ButtonType.Submit" Disabled="isDepDisable" Variant="Variant.Filled" Size="Size.Small" Style="text-transform:none" Color="Color.Info"
                                       EndIcon="@Icons.Material.Outlined.Add" IconSize="Size.Small">Add</MudButton>
                        </MudItem>
                    </MudGrid>
                    <MudGrid Class="mt-5 ml-8 mb-2">
                        <MudSimpleTable Dense Hover Elevation="0">
                             <tbody>
                                @if(vehicleDepartments != null)
                                {
                                    foreach (var items in vehicleDepartments)
                                    {
                                        <tr>
                                           @*  <td width="100px">
                                                @if (items.IsActive == true)
                                                {
                                                    <MudTooltip Text="Active" Placement="Placement.Right">
                                                        <MudIconButton OnClick="@((e) => isActiveDepartment(items.Id))" Icon="@Icons.Material.Outlined.Sync" Size="Size.Small" Color="Color.Info"></MudIconButton>
                                                    </MudTooltip>
                                                }
                                                else
                                                {
                                                    <MudTooltip Text="Inactive" Placement="Placement.Right">
                                                        <MudIconButton OnClick="@((e) => isActiveDepartment(items.Id))" Icon="@Icons.Material.Outlined.SyncDisabled" Size="Size.Small" Color="Color.Error"></MudIconButton>
                                                    </MudTooltip>
                                                }
                                            </td> *@
                                            <td style="@(items.IsActive == false ? $"color:{Colors.Grey.Lighten1};" : $"")">@items.Name</td>
                                        </tr>
                                    }
                                }                                
                            </tbody>
                        </MudSimpleTable>
                    </MudGrid>
                </EditForm>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
</MudContainer>

@code {
    bool isDepDisable;
    bool isLocDisable;
    VehicleLocation location = new();
    VehicleDepartment department = new();
    List<VehicleLocation>? vehicleLocations = new();
    List<VehicleDepartment>? vehicleDepartments = new();

    protected override async Task OnInitializedAsync()
    {
        await getLocations();
        await getDepartments();
    }

    public async Task getLocations()
    {
        vehicleLocations = await Http.GetFromJsonAsync<List<VehicleLocation>>("api/VehicleConfigurationFeature/GetAllVehicleLocations");
    }

    public async Task getDepartments()
    {
        vehicleDepartments = await Http.GetFromJsonAsync<List<VehicleDepartment>>("api/VehicleConfigurationFeature/GetAllVehicleDepartments");
    }

    public async Task addLocation(EditContext context)
    {
        isLocDisable = true;
        var request = await Http.PostAsJsonAsync("api/VehicleConfigurationFeature/AddVehicleLocation", location);
        if (request.IsSuccessStatusCode)
        {
            //showSnackBar("Successfully added vehicle location");
            location = new();
            await getLocations();
        }
        isLocDisable = false;
        StateHasChanged();
    }

    public async Task addDepartment(EditContext context)
    {
        isDepDisable = true;
        var request = await Http.PostAsJsonAsync("api/VehicleConfigurationFeature/AddVehicleDepartment", department);
        if (request.IsSuccessStatusCode)
        {
            department = new();
            await getDepartments();
        }
        isDepDisable = false;
        StateHasChanged();
    }

    private async Task isActiveDepartment(int id)
    {
        
    }

    private async Task isActiveLocation(int id)
    {

    }

    // void showSnackBar(string getstringvalue)
    // {
    //     snackBar.Add($"{getstringvalue}", Severity.Success, config => { config.ShowCloseIcon = false; });
    // }
}
